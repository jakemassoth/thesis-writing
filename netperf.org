* Netperf exploration
Before running these, need to start the netserver daemon
#+begin_src shell :results output :exports both :eval yes
netserver
#+end_src

#+RESULTS:


#+begin_src shell :results output :exports both :eval yes
netperf
#+end_src 

#+RESULTS:
: MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : demo
: Recv   Send    Send                          
: Socket Socket  Message  Elapsed              
: Size   Size    Size     Time     Throughput  
: bytes  bytes   bytes    secs.    10^6bits/sec  
: 
: 131072  16384  16384    10.00    33227.33   

This is the normal TCP_STREAM test, used to measure large file transfers. Not super relevant to this project as we want to measure request-response time but good to see what TCP is good at.

#+begin_src shell :results output :exports both :eval yes 
netperf -t TCP_RR -c -C
#+end_src 

#+RESULTS:
: MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : demo : first burst 0
: Local /Remote
: Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
: Send   Recv   Size    Size   Time    Rate     local  remote local   remote
: bytes  bytes  bytes   bytes  secs.   per sec  % S    % S    us/Tr   us/Tr
: 
: 16384  131072 1       1      10.00   64791.92  32.14  32.14  19.842  19.842 
: 16384  131072

In this test (TCP_RR) netperf measures the request/response performance using TCP. It gives the transmission rate in messages per second.
** Changing the RR size
#+begin_src shell :results output :exports both :eval yes  
  netperf -t TCP_RR -c -C -- -r 1,1
#+end_src 

#+RESULTS:
: MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : demo : first burst 0
: Local /Remote
: Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
: Send   Recv   Size    Size   Time    Rate     local  remote local   remote
: bytes  bytes  bytes   bytes  secs.   per sec  % S    % S    us/Tr   us/Tr
: 
: 16384  131072 1       1      10.00   66540.82  31.99  31.99  19.231  19.231 
: 16384  131072

#+begin_src shell :results output :exports both :eval yes
netperf -t TCP_RR -c -C -- -r 128,128
#+end_src 

#+RESULTS:
: MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : demo : first burst 0
: Local /Remote
: Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
: Send   Recv   Size    Size   Time    Rate     local  remote local   remote
: bytes  bytes  bytes   bytes  secs.   per sec  % S    % S    us/Tr   us/Tr
: 
: 16384  131072 128     128    10.00   63965.45  32.23  32.23  20.157  20.157 
: 16384  131072

#+begin_src shell :results output :exports both :eval yes  
netperf -t TCP_RR -c -C -- -r 1k,1k
#+end_src 

#+RESULTS:
: MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : demo : first burst 0
: Local /Remote
: Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
: Send   Recv   Size    Size   Time    Rate     local  remote local   remote
: bytes  bytes  bytes   bytes  secs.   per sec  % S    % S    us/Tr   us/Tr
: 
: 16384  131072 1000    1000   10.00   63581.97  32.35  32.35  20.349  20.349 
: 16384  131072

#+begin_src shell :results output :exports both :eval yes  
netperf -t TCP_RR -c -C -- -r 16k,16k
#+end_src 

#+RESULTS:
: MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : demo : first burst 0
: Local /Remote
: Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
: Send   Recv   Size    Size   Time    Rate     local  remote local   remote
: bytes  bytes  bytes   bytes  secs.   per sec  % S    % S    us/Tr   us/Tr
: 
: 16384  131072 16000   16000  10.00   50943.13  31.71  31.71  24.900  24.900 
: 16384  131072

We can see in this test that the transmission rate starts to tank when the size goes up
** Accounting for the conneciton setup
We can see that when we use the TCP_CRR test which accounts for the connection setup time, the transmission rate tanks

#+begin_src shell :results output :exports both :eval yes  
netperf -t TCP_CRR -c -C -- -r 1,1
#+end_src 

#+RESULTS:
: MIGRATED TCP Connect/Request/Response TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : demo
: Local /Remote
: Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
: Send   Recv   Size    Size   Time    Rate     local  remote local   remote
: bytes  bytes  bytes   bytes  secs.   per sec  %      %      us/Tr   us/Tr
: 
: 16384  131072 1       1      10.00   17927.51   34.75  35.17  77.524  78.463
: 16384  131072

#+begin_src shell :results output :exports both :eval yes  
netperf -t TCP_CRR -c -C -- -r 128,128
#+end_src 

#+RESULTS:
: MIGRATED TCP Connect/Request/Response TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : demo
: Local /Remote
: Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
: Send   Recv   Size    Size   Time    Rate     local  remote local   remote
: bytes  bytes  bytes   bytes  secs.   per sec  %      %      us/Tr   us/Tr
: 
: 16384  131072 128     128    10.00   17962.60   34.99  35.39  77.908  78.800
: 16384  131072

#+begin_src shell :results output :exports both :eval yes  
netperf -t TCP_CRR -c -C -- -r 1k,1k
#+end_src 

#+RESULTS:
: MIGRATED TCP Connect/Request/Response TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : demo
: Local /Remote
: Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
: Send   Recv   Size    Size   Time    Rate     local  remote local   remote
: bytes  bytes  bytes   bytes  secs.   per sec  %      %      us/Tr   us/Tr
: 
: 16384  131072 1000    1000   10.00   18011.30   34.84  35.28  77.374  78.355
: 16384  131072

#+begin_src shell :results output :exports both :eval yes  
netperf -t TCP_CRR -c -C -- -r 16k,16k
#+end_src 

#+RESULTS:
: MIGRATED TCP Connect/Request/Response TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : demo
: Local /Remote
: Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
: Send   Recv   Size    Size   Time    Rate     local  remote local   remote
: bytes  bytes  bytes   bytes  secs.   per sec  %      %      us/Tr   us/Tr
: 
: 16384  131072 16000   16000  10.00   16641.73   34.88  35.29  83.827  84.829
: 16384  131072
** Now lets get some performance out of it
https://www.ibm.com/docs/en/aix/7.2?topic=tuning-tcp-request-response-workload

TCP_NODELAY is a socket option that controls whether to use delayed acknowledgments or not. Delayed acknowledgments can slow down request/response workloads as it can wait up to 200ms to piggyback an acknowledgment on a response packet.

Netperf allows us to enable TCP_NODELAY with the -D flag.

#+begin_src shell :results output :exports both :eval yes
netperf -t TCP_RR -c -C -- -r 1,1 -D
#+end_src

#+RESULTS:
: MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : nodelay : demo : first burst 0
: Local /Remote
: Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
: Send   Recv   Size    Size   Time    Rate     local  remote local   remote
: bytes  bytes  bytes   bytes  secs.   per sec  % S    % S    us/Tr   us/Tr
: 
: 16384  131072 1       1      10.00   64135.45  32.11  32.11  20.027  20.027 
: 16384  131072


#+begin_src shell :results output :exports both :eval yes
netperf -t TCP_RR -c -C -- -r 1k,1k -D
#+end_src

#+RESULTS:
: MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : nodelay : demo : first burst 0
: Local /Remote
: Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
: Send   Recv   Size    Size   Time    Rate     local  remote local   remote
: bytes  bytes  bytes   bytes  secs.   per sec  % S    % S    us/Tr   us/Tr
: 
: 16384  131072 1000    1000   10.00   62825.50  32.51  32.51  20.700  20.700 
: 16384  131072

#+begin_src shell :results output :exports both :eval yes
netperf -t TCP_RR -c -C -- -r 16k,16k -D
#+end_src

#+RESULTS:
: MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost () port 0 AF_INET : nodelay : demo : first burst 0
: Local /Remote
: Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
: Send   Recv   Size    Size   Time    Rate     local  remote local   remote
: bytes  bytes  bytes   bytes  secs.   per sec  % S    % S    us/Tr   us/Tr
: 
: 16384  131072 16000   16000  10.00   51840.44  31.60  31.60  24.385  24.385 
: 16384  131072

We can see that we get a significant performance increase with this.
*** Saturating the link
We can adjust the socket buffer sizes to better saturate the link. We can use the bandwidth delay product
